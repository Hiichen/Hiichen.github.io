<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译原理</title>
      <link href="/2022/11/11/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
      <url>/2022/11/11/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="1-NFA-gt-DFA"><a href="#1-NFA-gt-DFA" class="headerlink" title="1. NFA -&gt; DFA"></a>1. NFA -&gt; DFA</h4><h5 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h5><p>已知正则表达式 ab(ab|ba)*ba</p><p>(1) 将该正则表达式转化为 NFA 。</p><p>(2) 将 (1) 中得到的 NFA 转化为 DFA 。</p><p>(3) 将 (2) 中得到的 DFA 进行化简，得到状态数最小的 DFA。</p><p>解：</p><p>(1) NFA 如下：</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221111175324078.png" alt="image-20221111175324078" style="zoom:33%;" /><p>(2) </p><table><thead><tr><th align="left"></th><th align="left">a</th><th>b</th></tr></thead><tbody><tr><td align="left">A  {1}</td><td align="left">B  {2}</td><td></td></tr><tr><td align="left">B  {2}</td><td align="left"></td><td>C  {3}</td></tr><tr><td align="left">C  {3}</td><td align="left">D  {4}</td><td>E  {5, 6}</td></tr><tr><td align="left">D  {4}</td><td align="left"></td><td>C  {3}</td></tr><tr><td align="left">E  {5, 6}</td><td align="left">F  {3, 7}</td><td></td></tr><tr><td align="left">F  {3, 7} *</td><td align="left">D  {4}</td><td>E  {5, 6}</td></tr></tbody></table><p>DFA: </p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221111180644119.png" alt="image-20221111180644119" style="zoom:33%;" /><p>(3) 经检验，上图为最简的 DFA</p><h5 id="例二："><a href="#例二：" class="headerlink" title="例二："></a>例二：</h5><p>已知正则表达式 a(ba)*</p><p>(1) 构造该正则表达式的 NFA</p><p>(2) 由 NFA 构造 DFA</p><p>(3) 对 DFA 进行最小化</p><p>解：</p><p>(1) NFA 如图：</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221111181540493.png" alt="image-20221111181540493" style="zoom: 33%;" /><p>(2) </p><table><thead><tr><th></th><th>a</th><th>b</th></tr></thead><tbody><tr><td>A  {$\overline{1}$} &#x3D; {1}</td><td>B  {$\overline{2}$} &#x3D; {2, 3, 5}</td><td></td></tr><tr><td>B  {2, 3, 5} *</td><td></td><td>C  {$\overline{4}$} &#x3D; {4}</td></tr><tr><td>C  {4}</td><td>D  {$\overline{3}$} &#x3D; {3, 5}</td><td></td></tr><tr><td>D  {3, 5} *</td><td></td><td>C  {4}</td></tr></tbody></table><p>DFA 如下：</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221111182821985.png" alt="image-20221111182821985" style="zoom: 33%;" /><p>(3) 化简后</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221111183240076.png" alt="image-20221111183240076" style="zoom: 33%;" /><h4 id="2-LL-1-文法"><a href="#2-LL-1-文法" class="headerlink" title="2. LL(1) 文法"></a>2. LL(1) 文法</h4><h5 id="例一：-1"><a href="#例一：-1" class="headerlink" title="例一："></a>例一：</h5><p>已知文法$G[E]$:</p><p>$E\rightarrow Dt$</p><p>$D\rightarrow dDt|dt$</p><p>$T\rightarrow Te|e$</p><p>(1) 通过消除左递归和提取左因子（回溯），给出与$G[E]$等价的文法$G’[E]$</p><p>(2) 计算文法$G’[E]$非终结符的$First$集合和$Follow$集合</p><p>(3) 判断文法$G’[E]$是否为$LL(1)$文法</p><p>(4) 如果$G’[E]$是$LL(1)$文法，构造$G’[E]$的分析表</p><p>(5) 给出输入串$ddtte$的分析过程</p><p>解：</p><p>(1) </p><p>$E\rightarrow DT$</p><p>$D\rightarrow dD’$</p><p>$D’\rightarrow Dt|t$</p><p>$T\rightarrow eT’$</p><p>$T’\rightarrow eT’|\epsilon $</p><p>(2) </p><table><thead><tr><th></th><th>$First$</th><th>$Follow$</th></tr></thead><tbody><tr><td>$E$</td><td>{$d$}</td><td>{$$ $}</td></tr><tr><td>$D$</td><td>{$d$}</td><td>{$e,t,$ $}</td></tr><tr><td>$D’$</td><td>{$d,t$}</td><td>{$e,t,$ $}</td></tr><tr><td>$T$</td><td>{$e$}</td><td>{$$ $}</td></tr><tr><td>$T’$</td><td>{$e,\epsilon$}</td><td>{$$ $}</td></tr></tbody></table><p>(3)</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221112145415429.png" alt="image-20221112145415429" style="zoom: 25%;" /><p>$First(Dt) \cap First(t) &#x3D; {d} \cap {t} &#x3D; \varnothing $</p><p>$First(eT’) \cap First(\epsilon) &#x3D; {e} \cap {\epsilon} &#x3D; \varnothing$</p><p>$FIrst(T’) \cap Follow(T’) &#x3D; {e,\epsilon} \cap {$} &#x3D; \varnothing$</p><p>(4)</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221112150851413.png" alt="image-20221112150851413" style="zoom: 25%;" /><table><thead><tr><th>$M[N,T]$</th><th>$d$</th><th>$t$</th><th>$e$</th><th>$$ $</th></tr></thead><tbody><tr><td>$E$</td><td>$E\rightarrow DT$</td><td></td><td></td><td></td></tr><tr><td>$D$</td><td>$D\rightarrow dD’$</td><td></td><td></td><td></td></tr><tr><td>$D’$</td><td>$D’\rightarrow Dt$</td><td>$D’\rightarrow t$</td><td></td><td></td></tr><tr><td>$T$</td><td></td><td></td><td>$T\rightarrow eT’$</td><td></td></tr><tr><td>$T’$</td><td></td><td></td><td>$T’\rightarrow eT’$</td><td>$T’\rightarrow \epsilon$</td></tr></tbody></table><p>(5)$LL(1)$文法分析栈</p><table><thead><tr><th>分析栈</th><th align="right">输入</th><th align="center">动作</th></tr></thead><tbody><tr><td>$$ E$</td><td align="right">$ddtte$$</td><td align="center">$E\rightarrow DT$</td></tr><tr><td>$$ TD$</td><td align="right">$ddtte$$</td><td align="center">$D\rightarrow dD’$</td></tr><tr><td>$$TD’d$</td><td align="right">$ddtte$$</td><td align="center">$match$</td></tr><tr><td>$$TD’$</td><td align="right">$dtte$$</td><td align="center">$D’\rightarrow Dt$</td></tr><tr><td>$$TtD$</td><td align="right">$dtte$$</td><td align="center">$D\rightarrow dD’$</td></tr><tr><td>$$TtD’d$</td><td align="right">$dtte$$</td><td align="center">$match$</td></tr><tr><td>$$TtD’$</td><td align="right">$tte$$</td><td align="center">$D’\rightarrow t$</td></tr><tr><td>$$Ttt$</td><td align="right">$tte$$</td><td align="center">$match$</td></tr><tr><td>$$Tt$</td><td align="right">$te$$</td><td align="center">$match$</td></tr><tr><td>$$T$</td><td align="right">$e$$</td><td align="center">$T\rightarrow eT’$</td></tr><tr><td>$$T’e$</td><td align="right">$e$$</td><td align="center">$match$</td></tr><tr><td>$$T’$</td><td align="right">$$$</td><td align="center">$T’\rightarrow \epsilon$</td></tr><tr><td>$$$</td><td align="right">$$$</td><td align="center">$accept$</td></tr></tbody></table><h5 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h5><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221112152715963.png" alt="image-20221112152715963" style="zoom: 33%;" /><p>(1)</p><p>$G’[A]$:</p><p>$A\rightarrow aA’$</p><p>$A’\rightarrow ABe|\epsilon$</p><p>$B\rightarrow dB’$</p><p>$B’\rightarrow bB’|\epsilon$</p><p>(2)</p><table><thead><tr><th></th><th>$First$</th><th>$Follow$</th></tr></thead><tbody><tr><td>$A$</td><td>${a}$</td><td>${$,d}$</td></tr><tr><td>$A’$</td><td>${a,\epsilon }$</td><td>${$,d}$</td></tr><tr><td>$B$</td><td>${d}$</td><td>${e}$</td></tr><tr><td>$B’$</td><td>${b,\epsilon }$</td><td>${ e}$</td></tr></tbody></table><p>(3)</p><p>$First(ABe)\cap First(\epsilon)&#x3D;{a}\cap {\epsilon}&#x3D;\varnothing$</p><p>$First(bB’)\cap FIrst(\epsilon)&#x3D;{b}\cap {\epsilon }&#x3D;\varnothing$</p><p>$First(B)\cap Follow(B)&#x3D;{d}\cap {e}&#x3D;\varnothing$</p><p>是$LL(1)$文法</p><p>(4)</p><table><thead><tr><th>$M[N,T]$</th><th>$a$</th><th>$d$</th><th>$b$</th><th>$e$</th><th>$$$</th></tr></thead><tbody><tr><td>$A$</td><td>$A\rightarrow aA’$</td><td></td><td></td><td></td><td></td></tr><tr><td>$A’$</td><td>$A’\rightarrow ABe$</td><td>$A’\rightarrow \epsilon$</td><td></td><td></td><td>$A’\rightarrow \epsilon$</td></tr><tr><td>$B$</td><td></td><td>$B\rightarrow dB’$</td><td></td><td></td><td></td></tr><tr><td>$B’$</td><td></td><td></td><td>$B’\rightarrow bB’$</td><td>$B’\rightarrow \epsilon$</td><td></td></tr></tbody></table><p>(5)</p><table><thead><tr><th>分析栈</th><th align="right">输入</th><th align="center">输出</th></tr></thead><tbody><tr><td>$$A$</td><td align="right">$aade$$</td><td align="center">$A\rightarrow aA’$</td></tr><tr><td>$$A’a$</td><td align="right">$aade$$</td><td align="center">$match$</td></tr><tr><td>$$A’$</td><td align="right">$ade$$</td><td align="center">$A’\rightarrow ABe$</td></tr><tr><td>$$eBA$</td><td align="right">$ade$$</td><td align="center">$A\rightarrow aA’$</td></tr><tr><td>$$eBA’a$</td><td align="right">$ade$$</td><td align="center">$match$</td></tr><tr><td>$$eBA’$</td><td align="right">$de$$</td><td align="center">$A’\rightarrow \epsilon$</td></tr><tr><td>$$eB$</td><td align="right">$de$$</td><td align="center">$B\rightarrow dB’$</td></tr><tr><td>$$eB’d$</td><td align="right">$de$$</td><td align="center">$match$</td></tr><tr><td>$$eB’$</td><td align="right">$e$$</td><td align="center">$B’\rightarrow \epsilon$</td></tr><tr><td>$$e$</td><td align="right">$e$$</td><td align="center">$match$</td></tr><tr><td>$$$</td><td align="right">$$$</td><td align="center">$accept$</td></tr></tbody></table><h4 id="3-LR-0-文法"><a href="#3-LR-0-文法" class="headerlink" title="3. LR(0)文法"></a>3. LR(0)文法</h4><h5 id="例一：-2"><a href="#例一：-2" class="headerlink" title="例一："></a>例一：</h5><p>已知文法$G[E]$:</p><p>$E\rightarrow aA|bB$</p><p>$A\rightarrow cA|d$</p><p>$B\rightarrow cB|d$</p><p>(1) 为这个文法构造$LR(0)$项的$DFA$</p><p>该文法的产生式</p><p>$E’\rightarrow .E$     $E\rightarrow .aA$    $E\rightarrow a.A$</p><p>$E\rightarrow aA.$    $E\rightarrow .bB$    $E\rightarrow b.B$</p><p>$E\rightarrow bB.$    $A\rightarrow .cA$    $A\rightarrow c.A$</p><p>$A\rightarrow cA.$$A\rightarrow .d$$A\rightarrow d.$</p><p>$B\rightarrow .cB$$B\rightarrow c.B$$B\rightarrow cB.$</p><p>$B\rightarrow .d$$B\rightarrow d.$</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221113201813123.png" alt="image-20221113201813123" style="zoom: 25%;" /><p>(2) 判断该文法是否是$LR(0)$文法，并说明原因</p><p>是，因为$DFA$中的每一项都没有 移入-归约冲突 或者 归约-归约冲突.</p><p>(3) 如果文法是$LR(0)$文法，构造其$LR(0)$分析表</p><table><thead><tr><th align="center">状态</th><th align="center">动作</th><th align="center">规则</th><th align="center">输入$a$</th><th align="center">输入$b$</th><th align="center">输入$c$</th><th align="center">输入$d$</th><th align="center">$Goto\ E$</th><th align="center">$Goto\ A$</th><th align="center">$Goto\ B$</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">移进</td><td align="center"></td><td align="center">2</td><td align="center">3</td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1</td><td align="center">归约</td><td align="center">$E’\rightarrow E$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">移进</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">5</td><td align="center">6</td><td align="center"></td><td align="center">4</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">移进</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">9</td><td align="center">11</td><td align="center"></td><td align="center"></td><td align="center">8</td></tr><tr><td align="center">4</td><td align="center">归约</td><td align="center">$E\rightarrow aA$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">移进</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">5</td><td align="center">6</td><td align="center"></td><td align="center">7</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center">归约</td><td align="center">$A\rightarrow d$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">7</td><td align="center">归约</td><td align="center">$A\rightarrow cA$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">8</td><td align="center">归约</td><td align="center">$E\rightarrow bB$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">9</td><td align="center">移进</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">9</td><td align="center">11</td><td align="center"></td><td align="center"></td><td align="center">10</td></tr><tr><td align="center">10</td><td align="center">归约</td><td align="center">$B\rightarrow cB$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">11</td><td align="center">归约</td><td align="center">$B\rightarrow d$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="4-逆波兰式、三元式、四元式"><a href="#4-逆波兰式、三元式、四元式" class="headerlink" title="4. 逆波兰式、三元式、四元式"></a>4. 逆波兰式、三元式、四元式</h4><h5 id="例一"><a href="#例一" class="headerlink" title="例一:"></a>例一:</h5><p>分别写出$w+(a+b)*(c+d&#x2F;(e-f)+g)$等价的逆波兰式，四元式，三元式</p><p>解：</p><p>语法树：<img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221114202030935.png" alt="image-20221114202030935" style="zoom:10%;" /></p><p>后缀表达式则是逆波兰式 </p><p>$wab+cdef-&#x2F;+g+*+$</p><p>三地址码：</p><p>$t1 &#x3D; e - f$</p><p>$t2 &#x3D; d &#x2F; t1$</p><p>$t3 &#x3D; c+t2$</p><p>$t4&#x3D;a+b$</p><p>$t5&#x3D;t3+g$</p><p>$t6&#x3D;t4*t5$</p><p>$t7&#x3D;w+t6$</p><p>四元式：</p><p>$(- ,e,f,t1)$</p><p>$(&#x2F;,d,t1,t2)$</p><p>$(+,c,t2,t3)$</p><p>$(+,a,b,t4)$</p><p>$(+,t3,g,t5)$</p><p>$(*,t4,t5,t6)$</p><p>$(+,w,t6,t7)$</p><p>三元式：</p><p>$(0)(- ,e,f)$</p><p>$(1)(&#x2F;,d,(0))$</p><p>$(2)(+,c,(1))$</p><p>$(3)(+,a,b)$</p><p>$(4)(+,(2),g)$</p><p>$(5)(*,(3),(4))$</p><p>$(6)(+,w,(5))$</p><h4 id="5-SLR-1-文法"><a href="#5-SLR-1-文法" class="headerlink" title="5. SLR(1)文法"></a>5. SLR(1)文法</h4><h5 id="例一：-3"><a href="#例一：-3" class="headerlink" title="例一："></a>例一：</h5><p>考虑一下的文法：</p><p>$E\rightarrow (L)|a$</p><p>$L\rightarrow EL|E$</p><p>a. 为这个文法构造$LR(0)$项目的$DFA$</p><p>b.构造$SLR(1)$分析表</p><p>c.显示分析栈和输入串$((a)a(aa))$的$SLR(1)$分析程序的动作</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221118225332276.png" alt="image-20221118225332276" style="zoom:25%;" /><p>$Follow(E’)&#x3D;{ $ }$</p><p>$Follow(E)&#x3D;{(,),a,$ }$</p><p>$Follow(L)&#x3D;{)}$</p><table><thead><tr><th align="center">状态</th><th align="center"></th><th align="center">输</th><th align="center">入</th><th align="center"></th><th align="center">Goto</th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">$($</td><td align="center">$a$</td><td align="center">$)$</td><td align="center">$$$</td><td align="center">$E$</td><td align="center">$L$</td></tr><tr><td align="center">0</td><td align="center">$s3$</td><td align="center">$s2$</td><td align="center"></td><td align="center"></td><td align="center">$1$</td><td align="center"></td></tr><tr><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">接受</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">$r(E\rightarrow a)$</td><td align="center">$r(E\rightarrow a)$</td><td align="center">$r(E\rightarrow a)$</td><td align="center">$r(E\rightarrow a)$</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">$s3$</td><td align="center">$s2$</td><td align="center"></td><td align="center"></td><td align="center">$4$</td><td align="center">$5$</td></tr><tr><td align="center">4</td><td align="center">$s3$</td><td align="center">$s2$</td><td align="center">$r(L\rightarrow E)$</td><td align="center"></td><td align="center">$4$</td><td align="center">$6$</td></tr><tr><td align="center">5</td><td align="center"></td><td align="center"></td><td align="center">$s7$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">6</td><td align="center"></td><td align="center"></td><td align="center">$r(L\rightarrow EL)$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">7</td><td align="center">$r(E\rightarrow (L))$</td><td align="center">$r(E\rightarrow (L))$</td><td align="center">$r(E\rightarrow (L))$</td><td align="center">$r(E\rightarrow (L))$</td><td align="center"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center"></th><th align="left">分析栈</th><th align="right">输入</th><th align="center">动作</th></tr></thead><tbody><tr><td align="center">$1$</td><td align="left">$$0$</td><td align="right">$((a)a(aa))$$</td><td align="center">$s3$</td></tr><tr><td align="center">$2$</td><td align="left">$$0(3$</td><td align="right">$(a)a(aa))$$</td><td align="center">$s3$</td></tr><tr><td align="center">$3$</td><td align="left">$$0(3(3$</td><td align="right">$a)a(aa))$$</td><td align="center">$s2$</td></tr><tr><td align="center">$4$</td><td align="left">$$0(3(3a2$</td><td align="right">$)a(aa))$$</td><td align="center">$r(E\rightarrow a)$</td></tr><tr><td align="center">$5$</td><td align="left">$$0(3(3E4$</td><td align="right">$)a(aa))$$</td><td align="center">$r(L\rightarrow E)$</td></tr><tr><td align="center">$6$</td><td align="left">$$0(3(3L5$</td><td align="right">$)a(aa))$$</td><td align="center">$s7$</td></tr><tr><td align="center">$7$</td><td align="left">$$0(3(3L5)7$</td><td align="right">$a(aa))$$</td><td align="center">$r(E\rightarrow (L))$</td></tr><tr><td align="center">$8$</td><td align="left">$$0(3E4$</td><td align="right">$a(aa))$$</td><td align="center">$s2$</td></tr><tr><td align="center">$9$</td><td align="left">$$0(3E4a2$</td><td align="right">$(aa))$$</td><td align="center">$r(E\rightarrow a)$</td></tr><tr><td align="center">$10$</td><td align="left">$$0(3E4E4$</td><td align="right">$(aa))$$</td><td align="center">$s3$</td></tr><tr><td align="center">$11$</td><td align="left">$$0(3E4E4(3$</td><td align="right">$aa))$$</td><td align="center">$s2$</td></tr><tr><td align="center">$12$</td><td align="left">$$0(3E4E4(3a2$</td><td align="right">$a))$$</td><td align="center">$r(E\rightarrow a)$</td></tr><tr><td align="center">$13$</td><td align="left">$$0(3E4E4(3E4$</td><td align="right">$a))$$</td><td align="center">$s2$</td></tr><tr><td align="center">$14$</td><td align="left">$$0(3E4E4(3E4a2$</td><td align="right">$))$$</td><td align="center">$r(E\rightarrow a)$</td></tr><tr><td align="center">$15$</td><td align="left">$$0(3E4E4(3E4E4$</td><td align="right">$))$$</td><td align="center">$r(L\rightarrow E)$</td></tr><tr><td align="center">$16$</td><td align="left">$$0(3E4E4(3E4L6$</td><td align="right">$))$$</td><td align="center">$r(L\rightarrow EL)$</td></tr><tr><td align="center">$17$</td><td align="left">$$0(3E4E4(3L5$</td><td align="right">$))$$</td><td align="center">$s7$</td></tr><tr><td align="center">$18$</td><td align="left">$$0(3E4E4(3L5)7$</td><td align="right">$)$$</td><td align="center">$r(E\rightarrow (L))$</td></tr><tr><td align="center">$19$</td><td align="left">$$0(3E4E4E4$</td><td align="right">$)$$</td><td align="center">$r(L\rightarrow E)$</td></tr><tr><td align="center">$20$</td><td align="left">$$0(3E4E4L6$</td><td align="right">$)$$</td><td align="center">$r(L\rightarrow EL)$</td></tr><tr><td align="center">$21$</td><td align="left">$$0(3E4L6$</td><td align="right">$)$$</td><td align="center">$r(L\rightarrow EL)$</td></tr><tr><td align="center">$22$</td><td align="left">$$0(3L5$</td><td align="right">$)$$</td><td align="center">$s7$</td></tr><tr><td align="center">$23$</td><td align="left">$$0(3L5)7$</td><td align="right">$$$</td><td align="center">$r(E\rightarrow (L))$</td></tr><tr><td align="center">$24$</td><td align="left">$$0E1$</td><td align="right">$$$</td><td align="center">接受</td></tr></tbody></table><h4 id="6-LR-1-文法"><a href="#6-LR-1-文法" class="headerlink" title="6. LR(1)文法"></a>6. LR(1)文法</h4><h5 id="例一：-4"><a href="#例一：-4" class="headerlink" title="例一："></a>例一：</h5><p>考虑以下的文法：</p><p>$E\rightarrow (L)|a$</p><p>$L\rightarrow L,E|E$</p><p>a. 为这个文法构造$LR(1)$项目的$DFA$</p><p>b. 构造一般的$LR(1)$分析表</p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20221119164416146.png" alt="image-20221119164416146" style="zoom: 25%;" /><table><thead><tr><th align="center">状态</th><th align="center"></th><th align="center"></th><th align="center">输入</th><th align="center"></th><th align="center"></th><th align="center">$Goto$</th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">$($</td><td align="center">$a$</td><td align="center">$)$</td><td align="center">$,$</td><td align="center">$$$</td><td align="center">$E$</td><td align="center">$L$</td></tr><tr><td align="center">$0$</td><td align="center">$s3$</td><td align="center">$s2$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">$1$</td><td align="center"></td></tr><tr><td align="center">$1$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">接受</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$2$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">$r(E\rightarrow a)$</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$3$</td><td align="center">$s8$</td><td align="center">$s6$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">$5$</td><td align="center">$4$</td></tr><tr><td align="center">$4$</td><td align="center">$s8$</td><td align="center">$s6$</td><td align="center">$s7$</td><td align="center">$s9$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$5$</td><td align="center"></td><td align="center"></td><td align="center">$r(L\rightarrow E)$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$6$</td><td align="center"></td><td align="center"></td><td align="center">$r(E\rightarrow a)$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$7$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">$r(E\rightarrow (L))$</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$8$</td><td align="center">$s8$</td><td align="center">$s6$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">$5$</td><td align="center">$11$</td></tr><tr><td align="center">$9$</td><td align="center">$s8$</td><td align="center">$s6$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">$10$</td><td align="center"></td></tr><tr><td align="center">$10$</td><td align="center"></td><td align="center"></td><td align="center">$r(L\rightarrow L,E)$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$11$</td><td align="center"></td><td align="center"></td><td align="center">$s12$</td><td align="center">$s9$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$12$</td><td align="center"></td><td align="center"></td><td align="center">$r(E\rightarrow (L))$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 每日一题</title>
      <link href="/2022/10/14/leetcode%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
      <url>/2022/10/14/leetcode%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="leetcode-每日一题"><a href="#leetcode-每日一题" class="headerlink" title="leetcode 每日一题"></a><code>leetcode</code> 每日一题</h2><h3 id="940-不同的子序列-II-20-10-14"><a href="#940-不同的子序列-II-20-10-14" class="headerlink" title="940. 不同的子序列 II(20.10.14)"></a><a href="https://leetcode.cn/problems/distinct-subsequences-ii/">940. 不同的子序列 II</a>(20.10.14)</h3><p>​  【题目描述】</p><p>​给定一个字符串 s，计算 s 的 不同非空子序列 的个数。因为结果可能很大，所以返回答案需要对 10^9 + 7 取余 。</p><p>字符串的 子序列 是经由原字符串删除一些（也可能不删除）字符但不改变剩余字符相对位置的一个新字符串。</p><p>​  【解题思路】</p><p>​运用<strong>动态规划</strong>算法，$dp[i]$ 是前 $i$ 个字符的非空子序列个数。加入第 $i$ 个字符后，如果第 $i$ 个字符在前面没出现过，则新增了 $dp[i - 1] + 1$ 个子序列，且无重复子序列；如果第 $i$ 个字符在之后出现了，那么重复的子序列个数就也是 $dp[i - 1] + 1$ 个。</p><p>​在代码中以 $dp_i$ 代表 $dp[i]$，以 $dp_j$ 代表 $dp[i - 1]$ 。以 $repeat$ 数组记录第 $i$ 个字符是否出现过，及其上一次出现时新增的子序列数，这个新增序列数是包括重复的子序列的。</p><p>​$dp[i]$ 就等于 $dp[i - 1]$ 加新增减重复。</p><p>​  【代码】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">distinctSubseqII</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> dp_i = <span class="number">0</span>, dp_j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> repeat[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(s[i] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            dp_i = <span class="number">1</span>;</span><br><span class="line">            repeat[s[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dp_i = (dp_j % mod * <span class="number">2</span> + <span class="number">1</span> - repeat[s[i] - <span class="string">&#x27;a&#x27;</span>] % mod + mod) % mod;</span><br><span class="line">            <span class="comment">/* 提前做模运算，防止数值越界 */</span></span><br><span class="line">            repeat[s[i] - <span class="string">&#x27;a&#x27;</span>] = dp_j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp_j = dp_i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1441-用栈操作构建数组-20-10-15"><a href="#1441-用栈操作构建数组-20-10-15" class="headerlink" title="1441. 用栈操作构建数组(20.10.15)"></a><a href="https://leetcode.cn/problems/build-an-array-with-stack-operations/">1441. 用栈操作构建数组</a>(20.10.15)</h3><p>​  【题目描述】</p><p>​给你一个数组 target 和一个整数 n。每次迭代，需要从  list &#x3D; { 1 , 2 , 3 …, n } 中依次读取一个数字。</p><p>请使用下述操作来构建目标数组 target ：</p><p>​“Push”：从 list 中读取一个新元素， 并将其推入数组中。<br>​“Pop”：删除数组中的最后一个元素。<br>​如果目标数组构建完成，就停止读取更多元素。<br>​题目数据保证目标数组严格递增，并且只包含 1 到 n 之间的数字。</p><p>​请返回构建目标数组所用的操作序列。如果存在多个可行方案，返回任一即可。</p><p>示例 1：</p><p>​输入：target &#x3D; [1,3], n &#x3D; 3<br>​输出：[“Push”,”Push”,”Pop”,”Push”]<br>​解释：<br>​读取 1 并自动推入数组 -&gt; [1]<br>​读取 2 并自动推入数组，然后删除它 -&gt; [1]<br>​读取 3 并自动推入数组 -&gt; [1,3]</p><p>​  【解题思路】</p><p>​当 $target$ 中的数字等于 $list$ 中的时，输出 $Push$ 否则输出 $Push、Pop$ </p><p>​  【代码】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ** <span class="title function_">buildArray</span><span class="params">(<span class="type">int</span>* target, <span class="type">int</span> targetSize, <span class="type">int</span> n, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">char</span> **res = (<span class="type">char</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span> *) * n * <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n &amp;&amp; j &lt; targetSize; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; target[j])&#123;</span><br><span class="line">            res[pos++] = <span class="string">&quot;Push&quot;</span>;</span><br><span class="line">            res[pos++] = <span class="string">&quot;Pop&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res[pos++] = <span class="string">&quot;Push&quot;</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = pos;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1700-无法吃午餐的学生数量"><a href="#1700-无法吃午餐的学生数量" class="headerlink" title="1700. 无法吃午餐的学生数量"></a><a href="https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/">1700. 无法吃午餐的学生数量</a></h3><p>​  【题目描述】</p><p>​学校的自助午餐提供圆形和方形的三明治，分别用数字 $0$ 和 $1$ 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。</p><p>​餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个栈里，每一轮：</p><p>​如果队列最前面的学生喜欢栈顶的三明治，那么会拿走它并离开队列。<br>​否则，这名学生会放弃这个三明治 并回到队列的尾部。<br>​这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</p><p>​给你两个整数数组 $students$ 和 $sandwiches$ ，其中 $sandwiches[i]$ 是栈里面第 $i$ 个三明治的类型（$i &#x3D; 0$ 是栈的顶部）， $students[j]$ 是初始队列里第 $j$ 名学生对三明治的喜好（$j &#x3D; 0$ 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p><p>​  【解题思路】</p><p>​只需先算出学生中喜欢圆形和方形三明治的人数，在顺序遍历三明治数组，当出现数组中第 $i$ 个三明治对应的形状没有学生喜欢时，$studentsSize - i$ 则为吃不到三明治。</p><p>​注意，如果在循环中有 $return$ 时，循环外也不能没有 $return$</p><p>​   【代码】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">countStudents</span><span class="params">(<span class="type">int</span>* students, <span class="type">int</span> studentsSize, <span class="type">int</span>* sandwiches, <span class="type">int</span> sandwichesSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> s0 = <span class="number">0</span>, s1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; studentsSize; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(students[i] == <span class="number">0</span>)</span><br><span class="line">            s0 ++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s1 ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; sandwichesSize; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sandwiches[i] == <span class="number">0</span> &amp;&amp; s0 &gt; <span class="number">0</span>)</span><br><span class="line">            s0 --;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sandwiches[i] == <span class="number">1</span> &amp;&amp; s1 &gt; <span class="number">0</span>)</span><br><span class="line">            s1 --;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (studentsSize - i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法练习</title>
      <link href="/2022/09/28/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
      <url>/2022/09/28/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是存储在连续内存上的相同类型数据的集合。</p><p>注意：</p><p>​数组下标都是从0开始的。</p><p>​数组在内存空间的地址是连续的。</p><h4 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1. 二分查找"></a>1. 二分查找</h4><p>​力扣题号: <a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></p><p>​<strong>【题目描述】</strong></p><p>​给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[middle] &lt; target)&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &gt; target)&#123;</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*注意区间的开闭情况</p><h4 id="2-移除元素"><a href="#2-移除元素" class="headerlink" title="2. 移除元素"></a>2. 移除元素</h4><p>​力扣题号：<a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></p><p>​<strong>【题目描述】</strong></p><p>​给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] != val)&#123;</span><br><span class="line">            nums[count++] = nums[i]; </span><br><span class="line">            <span class="comment">//将第(count + 1)个不为0的元素移到第count位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-滑动窗口"><a href="#3-滑动窗口" class="headerlink" title="3.滑动窗口"></a>3.滑动窗口</h4><p>​力扣题号：<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></p><p>​【题目描述】</p><p>​给定一个含有 n 个正整数的数组和一个正整数 target 。找出该数组中满足其和 ≥ target 的长度最小的 连续子数组，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">//当 target &lt; sum 时置1，以判断数组之和是否大于目标值</span></span><br><span class="line">    <span class="type">int</span> len = numsSize, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++)&#123;</span><br><span class="line">        sum += nums[j];</span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">            max = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; (j - i + <span class="number">1</span>))</span><br><span class="line">                len = j - i + <span class="number">1</span>;</span><br><span class="line">            sum -= nums[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max)</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>​链表三种类型：单链表、双链表、循环链表。</p><p>​链表节点在内存空间中不连续的分布。</p><p>​链表定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">ListNode *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-移除链表元素"><a href="#1-移除链表元素" class="headerlink" title="1. 移除链表元素"></a>1. 移除链表元素</h4><p>​力扣题号： 203. 移除链表元素</p><p>​【题目描述】</p><p>​给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">removeElements</span><span class="params">(<span class="keyword">struct</span> ListNode* head, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">p</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">dummyHead</span>;</span> </span><br><span class="line">    dummyHead= (<span class="keyword">struct</span> ListNode*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    <span class="comment">//虚拟头节点内存空间分配</span></span><br><span class="line">    dummyHead-&gt;next = head;</span><br><span class="line">    p = dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next-&gt;val == val)&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">tmp</span> =</span> p-&gt;next;</span><br><span class="line">            p-&gt;next = tmp-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(tmp);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">    &#125;<span class="comment">//删除操作</span></span><br><span class="line">    head = dummyHead-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(dummyHead);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-链表常见的六个操作"><a href="#2-链表常见的六个操作" class="headerlink" title="2. 链表常见的六个操作"></a>2. 链表常见的六个操作</h4><p>​力扣题号：<a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a></p><p>​【题目描述】</p><p>​设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>, <code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 <code>0-index</code> 的。</p><p>​在链表类中实现这些功能：</p><p>​<code>get(index)</code>：获取链表中第 <code>index </code>个节点的值。如果索引无效，则返回-1。<br>​<code>addAtHead(val)</code>：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。<br>​<code>addAtTail(val)</code>：将值为 <code>val</code> 的节点追加到链表的最后一个元素。<br>​<code>addAtIndex(index,val)</code>：在链表中的第 <code>index</code> 个节点之前添加值为 <code>val</code>  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。<br>​<code>deleteAtIndex(index)</code>：如果索引 <code>index</code> 有效，则删除链表中的第 <code>index</code> 个节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">define <span class="title function_">MAX</span><span class="params">(a, b)</span> <span class="params">((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">head</span>;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125; MyLinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode *<span class="title function_">ListNodeCreat</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">node</span> =</span> (<span class="keyword">struct</span> ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    node-&gt;val = val;</span><br><span class="line">    node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyLinkedList* <span class="title function_">myLinkedListCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    MyLinkedList * obj = (MyLinkedList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MyLinkedList));</span><br><span class="line">    obj-&gt;head = ListNodeCreat(<span class="number">0</span>);</span><br><span class="line">    obj-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">myLinkedListGet</span><span class="params">(MyLinkedList* obj, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= obj-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">cur</span> =</span> obj-&gt;head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myLinkedListAddAtIndex</span><span class="params">(MyLinkedList* obj, <span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; obj-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    index = MAX(<span class="number">0</span>, index);</span><br><span class="line">    obj-&gt;size++;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">pred</span> =</span> obj-&gt;head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        pred = pred-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">toAdd</span> =</span> ListNodeCreat(val);</span><br><span class="line">    toAdd-&gt;next = pred-&gt;next;</span><br><span class="line">    pred-&gt;next = toAdd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myLinkedListAddAtHead</span><span class="params">(MyLinkedList* obj, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    myLinkedListAddAtIndex(obj, <span class="number">0</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myLinkedListAddAtTail</span><span class="params">(MyLinkedList* obj, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    myLinkedListAddAtIndex(obj, obj-&gt;size, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myLinkedListDeleteAtIndex</span><span class="params">(MyLinkedList* obj, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= obj-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    obj-&gt;size--;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">pred</span> =</span> obj-&gt;head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        pred = pred-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span> =</span> pred-&gt;next;</span><br><span class="line">    pred-&gt;next = pred-&gt;next-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myLinkedListFree</span><span class="params">(MyLinkedList* obj)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>, *tmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (cur = obj-&gt;head; cur;) &#123;</span><br><span class="line">        tmp = cur;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>​哈希表是根据关键码的值直接访问数据的数据结构。</p><p>​哈希碰撞的两种解决方法：拉链法和线性探测法。</p><p>​常见的三种哈希结构：数组、集合(set)、映射(map).</p><p>​哈希表常用来判断元素是否出现在集合中，但需要额外申请空间。</p><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><h4 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459. 重复的子字符串"></a><a href="https://leetcode.cn/problems/repeated-substring-pattern/">459. 重复的子字符串</a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/28/hello-world/"/>
      <url>/2022/09/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
